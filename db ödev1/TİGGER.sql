USE [AUTOMATION 1]
ALTER TABLE OPTIONS DROP CONSTRAINT AddOptionForUnSoldCar
IF OBJECT_ID('AddOptionUnSoldCar') IS NOT NULL
    DROP FUNCTION dbo.AddOptionUnSoldCar
	DROP TRIGGER SetSalesOptýonsPrice 
	DROP TRIGGER SetSalesOptýonsPrice2
    DROP TRIGGER  SetSalesCarPrice

	GO

CREATE TRIGGER  SetSalesCarPrice ON SALES FOR  INSERT
	AS BEGIN
		DECLARE @CARPRÝCE FLOAT
		DECLARE @NO VARCHAR(9)
		SELECT @NO= SSerialNO FROM INSERTED
		SELECT @CARPRÝCE=C.CPrice FROM CAR C,INSERTED i WHERE C.CSERÝALNO=i.SSerialNO
		UPDATE SALES SET SPrice =@CARPRÝCE WHERE @NO=SSerialNO
	END;

GO 
CREATE TRIGGER SetSalesOptýonsPrice ON OPTIONS FOR  INSERT
	AS BEGIN
		DECLARE @OPRÝCE FLOAT
		DECLARE @NO VARCHAR(9)
		SELECT @NO= OserialNO FROM INSERTED
		SELECT @OPRÝCE=i.OptPrice FROM OPTIONS O,INSERTED i WHERE O.OSerialNo=i.Oserialno
		UPDATE SALES SET SPrice+=@OPRÝCE WHERE @NO=Sserialno
	END;

GO 
CREATE TRIGGER SetSalesOptýonsPrice2 ON OPTIONS FOR  DELETE
	AS BEGIN
		DECLARE @OPRÝCE FLOAT
		DECLARE @NO VARCHAR(9)
		SELECT @NO= OserialNO FROM DELETED
		SELECT @OPRÝCE=i.OptPrice FROM DELETED i
		UPDATE SALES SET SPrice-=@OPRÝCE WHERE @NO=Sserialno
	END;

GO
CREATE FUNCTION dbo.AddOptionUnSoldCar()
RETURNS INT 
	AS BEGIN RETURN 
	(
		SELECT COUNT(*)
		FROM OPTIONS O
		LEFT JOIN SALES S
		ON S.SSerialNO=O.OSerialNO
		WHERE S.SSerialNO IS NULL
	)
	END;
GO
ALTER TABLE OPTIONS ADD CONSTRAINT AddOptionForUnSoldCar CHECK (dbo.AddOptionUnSoldCar()=0);


